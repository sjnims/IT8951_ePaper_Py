[project]
name = "it8951-epaper-py"
description = "Pure Python driver for IT8951 e-paper controller"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Steve Nims", email = "sjnims@gmail.com"},
]
keywords = ["e-paper", "epaper", "IT8951", "waveshare", "raspberry-pi"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: System :: Hardware",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "pydantic>=2.9",
    "pillow>=10.4",
    "numpy>=1.26,<2.0",  # Stay on 1.x to avoid breaking changes
    "psutil (>=7.0.0,<8.0.0)",
]
dynamic = ["version"]

[project.urls]
Homepage = "https://github.com/sjnims/IT8951_ePaper_Py"
Repository = "https://github.com/sjnims/IT8951_ePaper_Py"
Documentation = "https://github.com/sjnims/IT8951_ePaper_Py#documentation"
"Bug Tracker" = "https://github.com/sjnims/IT8951_ePaper_Py/issues"
"Changelog" = "https://github.com/sjnims/IT8951_ePaper_Py/blob/main/CHANGELOG.md"

[project.optional-dependencies]
rpi = ["RPi-GPIO>=0.7.1"]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
version = "0.14.1"  # Actual version is in src/IT8951_ePaper_Py/__init__.py
packages = [{include = "IT8951_ePaper_Py", from = "src"}]

[tool.poetry.dependencies]
python = ">=3.11"
pydantic = "^2.9"
pillow = "^10.4"
numpy = "^1.26"  # Will stay on 1.x branch
spidev = {version = "^3.6", markers = "platform_machine == 'aarch64' or platform_machine == 'armv7l'"}
RPi-GPIO = {version = "^0.7.1", markers = "platform_machine == 'aarch64' or platform_machine == 'armv7l'", optional = true}

[tool.poetry.group.dev.dependencies]
pytest = "^8.4.0"
pytest-cov = "^6.1.1"
pytest-mock = "^3.14.1"
ruff = "^0.11.13"
pyright = "^1.1.401"
radon = "^6.0.1"
pytest-xdist = "^3.7.0"

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.format]
# Use ruff's formatter (compatible with Black)
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint]
ignore = [
    "PLR2004",  # Magic value used in comparison (too many false positives)
    "TRY003",   # Avoid specifying long messages outside the exception class
    "TRY300",   # Consider else block (style preference)
    "TRY301",   # Detailed exception context is intentional for debugging
    "TRY400",   # Using logger.error with explicit exception info is intentional for structured error logging
]
select = [
    "E",    # pycodestyle errors
    "F",    # pyflakes
    "B",    # flake8-bugbear
    "I",    # isort
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "ANN",  # flake8-annotations
    "S",    # flake8-bandit
    "A",    # flake8-builtins
    "C4",   # flake8-comprehensions
    "PT",   # flake8-pytest-style
    "RUF",  # ruff-specific rules
    "D",    # pydocstyle
    "PL",   # pylint
    "SIM",  # flake8-simplify
    "RET",  # flake8-return
    "TRY",  # tryceratops
]

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = [
    "S101",    # Use of assert detected (pytest uses assertions)
    "ANN201",  # Missing return type annotation for public function
    "ANN001",  # Missing type annotations for function arguments
    "ANN401",  # Dynamically typed expressions (Any) are disallowed
    "E501",    # Line too long (handled by formatter)
    "D100",    # Missing docstring in public module
    "D101",    # Missing docstring in public class
    "D102",    # Missing docstring in public method
    "D103",    # Missing docstring in public function
    "D104",    # Missing docstring in public package
    "PLR0913", # Too many arguments to function call
    "PLR2004", # Magic value used in comparison
    "S105",    # Possible hardcoded password (test data often looks like this)
    "S106",    # Possible hardcoded password (test data)
    "S108",    # Probable insecure usage of temp file/directory
    "ARG001",  # Unused function argument (common in test fixtures)
    "ARG002",  # Unused method argument
    "PLR0915", # Too many statements
]
"src/IT8951_ePaper_Py/debug_mode.py" = ["ANN401"]  # Any is appropriate for debug logging kwargs

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["IT8951_ePaper_Py"]

[tool.poe.tasks]
# Convenience tasks for common operations
test = "pytest"
test-cov = "pytest --cov=src/IT8951_ePaper_Py --cov-report=term-missing --cov-report=html --cov-report=xml"
test-serial = "pytest -n 0"
test-fast = "pytest -m 'not slow'"
lint = "ruff check ."
format = "ruff format ."
typecheck = "pyright"
complexity = "radon cc src/ -a -nb"
check-all = ["lint", "typecheck", "test"]

[tool.pyright]
include = ["src", "tests"]
exclude = ["**/node_modules", "**/__pycache__", ".venv", ".git", ".ruff_cache"]
stubPath = "stubs"
reportMissingImports = true
reportImportCycles = true
reportMissingTypeStubs = false
useLibraryCodeForTypes = true
reportUnknownMemberType = "warning"
reportUnnecessaryTypeIgnoreComment = "none"
reportPrivateUsage = "warning"
reportUnusedFunction = "none"
reportUntypedFunctionDecorator = "none"
pythonVersion = "3.11"
typeCheckingMode = "strict"

[[tool.pyright.executionEnvironments]]
root = "src"
extraPaths = ["src"]

[[tool.pyright.executionEnvironments]]
root = "tests"
extraPaths = ["src", "tests"]
reportMissingImports = false
reportUnknownParameterType = "none"
reportMissingParameterType = "none"
reportUnknownLambdaType = "none"
reportUnknownMemberType = "none"
reportUnknownArgumentType = "none"
reportIncompatibleMethodOverride = "warning"
reportUnknownVariableType = "none"
reportUntypedFunctionDecorator = "none"
reportUntypedClassDecorator = "none"
reportUntypedBaseClass = "none"
reportUnusedFunction = "none"
reportUnusedVariable = "none"
reportUnusedImport = "warning"
reportPrivateUsage = "none"
reportConstantRedefinition = "none"
reportIncompatibleVariableOverride = "none"

[[tool.pyright.executionEnvironments]]
root = "examples"
extraPaths = ["src"]
# Suppress warnings about Pillow's incomplete type stubs in examples
reportUnknownMemberType = "none"
reportUnknownVariableType = "none"
reportUnknownArgumentType = "none"

[[tool.pyright.executionEnvironments]]
root = "."
include = ["conftest.py"]
extraPaths = ["src"]
# Suppress numpy randint type warning in conftest.py
reportUnknownMemberType = "none"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-n", "auto",  # Parallel execution enabled with proper test isolation
    "-ra",
    "--strict-markers",
    "--strict-config",
    "-vv",
    "--maxfail=3",  # Stop after 3 failures
    "--tb=short",  # Shorter traceback format
    "--dist=loadgroup",  # Group tests by module for better performance
    "--cov=src/IT8951_ePaper_Py",  # Coverage collection
    "--cov-report=term-missing",  # Show missing lines in terminal
    "--cov-report=html",  # Generate HTML report
    "--cov-report=xml",  # Generate XML for CI tools
]
# Markers for test organization and ATS
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "serial: marks tests that must run serially",
    "integration: marks integration tests",
    "performance: marks performance benchmarks",
    "hardware: marks tests requiring real hardware",
    "real_timing: marks tests that need real time.sleep() behavior",
    "unit: marks unit tests",
    "power: marks power management tests",
]
# Filter out coverage warnings from worker processes
filterwarnings = [
    "ignore:No data was collected:coverage.exceptions.CoverageWarning",
]
# Test execution optimizations
junit_family = "xunit2"
cache_dir = ".pytest_cache"


[tool.coverage.run]
source = ["src/IT8951_ePaper_Py"]
omit = [
    "*/tests/*",
    "*/__init__.py",
    "*/stubs/*",
]
branch = true
parallel = true  # Enable parallel coverage collection with pytest-xdist
concurrency = ["thread", "multiprocessing"]  # Support for pytest-xdist workers
sigterm = true  # Handle SIGTERM gracefully

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "@abstractmethod",
    "pass",
]
precision = 2
show_missing = true
skip_covered = false
fail_under = 95

[tool.radon]
exclude = "tests/*,docs/*,examples/*"
cc_min = "B"  # Minimum cyclomatic complexity grade
mi_min = "A"  # Minimum maintainability index grade
show_complexity = true
total_average = true
